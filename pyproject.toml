[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "talkie"
version = "0.1.2"
description = "A command line HTTP client that is easy to use"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [
    { name = "Craxti" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
dependencies = [
    "typer>=0.9.0",
    "httpx>=0.24.0",
    "rich>=13.4.2",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "openapi-spec-validator>=0.5.1",
    "pygments>=2.14.0",
    "xmltodict>=0.13.0",
    "html2text>=2020.1.16",
    "websockets>=10.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-httpserver>=1.0.6",
    "mypy>=1.3.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pylint>=3.0.0",
]

[project.scripts]
talkie = "talkie.__main__:main"
tlk = "talkie.__main__:main"

[tool.black]
line-length = 88
target-version = ["py38"]

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["talkie"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
]
show_missing = true

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
    "C0103",  # invalid-name (for single letter variables in comprehensions)
    "R0912",  # too-many-branches
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "W0622",  # redefined-builtin
    "C0302",  # too-many-lines
    "C0301",  # line-too-long (handled by black)
    "W0718",  # broad-exception-caught
    "W0611",  # unused-import
    "W0612",  # unused-variable
    "E1123",  # unexpected-keyword-arg
    "E1101",  # no-member
    "E0611",  # no-name-in-module
    "W0212",  # protected-access
    "W0603",  # global-statement
    "C0415",  # import-outside-toplevel
    "W0707",  # raise-missing-from
    "R0917",  # too-many-positional-arguments
    "R0916",  # too-many-boolean-expressions
    "R0911",  # too-many-return-statements
    "R1705",  # no-else-return
    "W1203",  # logging-fstring-interpolation
    "W1309",  # f-string-without-interpolation
    "R0902",  # too-many-instance-attributes
    "W0404",  # reimported
]

[tool.pylint.format]
max-line-length = 88
indent-string = "    "

[tool.pylint.design]
max-args = 7
max-locals = 20
max-branches = 15
max-statements = 60
max-attributes = 10
max-public-methods = 20

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-comments = true
ignore-docstrings = true
ignore-imports = false

[tool.pylint.spelling]
spelling-store-unknown-words = true

[tool.pylint.basic]
good-names = [
    "i", "j", "k", "ex", "Run", "_", "id", "db", "ui", "ok", "e", "f", "fp"
]

[tool.pylint.refactoring]
max-nested-blocks = 5 